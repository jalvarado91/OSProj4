diff -rupN --exclude=.git linux-2.6.18-419.el5.x86_64/arch/i386/kernel/syscall_table.S linux-2.6.18-419.el5.x86_64-memstat-dev/arch/i386/kernel/syscall_table.S
--- linux-2.6.18-419.el5.x86_64/arch/i386/kernel/syscall_table.S	2017-05-16 22:25:29.000000000 -0400
+++ linux-2.6.18-419.el5.x86_64-memstat-dev/arch/i386/kernel/syscall_table.S	2017-07-22 16:51:40.000000000 -0400
@@ -346,3 +346,4 @@ ENTRY(sys_call_table)
 	.long sys_ni_syscall
 	.long sys_recvmmsg
 	.long sys_prlimit64
+	.long sys_memstats
diff -rupN --exclude=.git linux-2.6.18-419.el5.x86_64/include/asm-i386/unistd.h linux-2.6.18-419.el5.x86_64-memstat-dev/include/asm-i386/unistd.h
--- linux-2.6.18-419.el5.x86_64/include/asm-i386/unistd.h	2017-06-09 18:57:29.000000000 -0400
+++ linux-2.6.18-419.el5.x86_64-memstat-dev/include/asm-i386/unistd.h	2017-07-22 16:53:49.000000000 -0400
@@ -344,10 +344,11 @@
 /* #define __NR_perf_event_open	336 */
 #define __NR_recvmmsg		337
 #define __NR_prlimit64		338
+#define __NR_memstats		339
 
 #ifdef __KERNEL__
 
-#define NR_syscalls 339
+#define NR_syscalls 340
 
 #ifndef __KERNEL_SYSCALLS_NO_ERRNO__
 /*
diff -rupN --exclude=.git linux-2.6.18-419.el5.x86_64/include/asm-x86_64/unistd.h linux-2.6.18-419.el5.x86_64-memstat-dev/include/asm-x86_64/unistd.h
--- linux-2.6.18-419.el5.x86_64/include/asm-x86_64/unistd.h	2017-05-16 22:25:33.000000000 -0400
+++ linux-2.6.18-419.el5.x86_64-memstat-dev/include/asm-x86_64/unistd.h	2017-07-22 16:55:26.000000000 -0400
@@ -669,10 +669,12 @@ __SYSCALL(__NR_perf_event_open, sys_ni_s
 __SYSCALL(__NR_recvmmsg, sys_recvmmsg)
 #define __NR_prlimit64		300
 __SYSCALL(__NR_prlimit64, sys_prlimit64)
+#define __NR_memstats		301
+__SYSCALL(__NR_memstats, sys_memstats)
 
 #ifdef __KERNEL__
 
-#define __NR_syscall_max __NR_prlimit64
+#define __NR_syscall_max __NR_memstats
 
 #ifndef __NO_STUBS
 
diff -rupN --exclude=.git linux-2.6.18-419.el5.x86_64/include/linux/memstats.h linux-2.6.18-419.el5.x86_64-memstat-dev/include/linux/memstats.h
--- linux-2.6.18-419.el5.x86_64/include/linux/memstats.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.6.18-419.el5.x86_64-memstat-dev/include/linux/memstats.h	2017-07-22 19:17:56.000000000 -0400
@@ -0,0 +1,10 @@
+struct memstats {
+	long free_pages;
+	long slab_pages;
+	long active_pages;
+	long inactive_pages;
+	long active_ref_pages;
+	long inactive_ref_pages;
+	long total_active_to_inactive;
+	long total_evicted;
+};
diff -rupN --exclude=.git linux-2.6.18-419.el5.x86_64/include/linux/mm.h linux-2.6.18-419.el5.x86_64-memstat-dev/include/linux/mm.h
--- linux-2.6.18-419.el5.x86_64/include/linux/mm.h	2017-05-16 22:25:33.000000000 -0400
+++ linux-2.6.18-419.el5.x86_64-memstat-dev/include/linux/mm.h	2017-07-23 13:43:15.000000000 -0400
@@ -237,6 +237,9 @@ struct inode;
 struct page {
 	unsigned long flags;		/* Atomic flags, some possibly
 					 * updated asynchronously */
+#ifdef CONFIG_JALVARADO
+	unsigned int m_reference_count;
+#endif
 	atomic_t _count;		/* Usage count, see below. */
 	atomic_t _mapcount;		/* Count of ptes mapped in mms,
 					 * to show when page is mapped
diff -rupN --exclude=.git linux-2.6.18-419.el5.x86_64/include/linux/syscalls.h linux-2.6.18-419.el5.x86_64-memstat-dev/include/linux/syscalls.h
--- linux-2.6.18-419.el5.x86_64/include/linux/syscalls.h	2017-05-16 22:25:33.000000000 -0400
+++ linux-2.6.18-419.el5.x86_64-memstat-dev/include/linux/syscalls.h	2017-07-22 16:58:04.000000000 -0400
@@ -613,4 +613,5 @@ asmlinkage long sys_eventfd(unsigned int
 asmlinkage long sys_mmap_pgoff(unsigned long addr, unsigned long len,
 			unsigned long prot, unsigned long flags,
 			unsigned long fd, unsigned long pgoff);
+asmlinkage long sys_memstats(int i);
 #endif
diff -rupN --exclude=.git linux-2.6.18-419.el5.x86_64/Makefile linux-2.6.18-419.el5.x86_64-memstat-dev/Makefile
--- linux-2.6.18-419.el5.x86_64/Makefile	2017-05-16 22:25:34.000000000 -0400
+++ linux-2.6.18-419.el5.x86_64-memstat-dev/Makefile	2017-07-22 16:58:56.000000000 -0400
@@ -557,7 +557,7 @@ export mod_strip_cmd
 
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y		+= kernel/ mm/ fs/ ipc/ security/ crypto/ block/
+core-y		+= kernel/ mm/ fs/ ipc/ security/ crypto/ block/ memstats/
 
 vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \
 		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
diff -rupN --exclude=.git linux-2.6.18-419.el5.x86_64/memstats/Makefile linux-2.6.18-419.el5.x86_64-memstat-dev/memstats/Makefile
--- linux-2.6.18-419.el5.x86_64/memstats/Makefile	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.6.18-419.el5.x86_64-memstat-dev/memstats/Makefile	2017-07-22 17:00:45.000000000 -0400
@@ -0,0 +1 @@
+obj-y := memstats.o
diff -rupN --exclude=.git linux-2.6.18-419.el5.x86_64/memstats/memstats.c linux-2.6.18-419.el5.x86_64-memstat-dev/memstats/memstats.c
--- linux-2.6.18-419.el5.x86_64/memstats/memstats.c	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.6.18-419.el5.x86_64-memstat-dev/memstats/memstats.c	2017-07-22 19:08:48.000000000 -0400
@@ -0,0 +1,67 @@
+#include <linux/linkage.h>
+#include <linux/mmzone.h>
+#include <linux/mm.h>
+#include <linux/vmstat.h>
+#include <linux/list.h>
+#include <asm/uaccess.h>
+#include <linux/kernel.h>
+#include <linux/memstats.h>
+
+asmlinkage long sys_memstats(struct memstats *stats)
+{
+	if(stats == NULL)
+		return -EINVAL;
+	
+	struct memstats *mystats;
+	struct zone *zone_ptr;
+	struct page *page_ptr;
+	unsigned long vm_events[NR_VM_EVENT_ITEMS];
+	
+	mystats = kmalloc(sizeof(*mystats), GFP_KERNEL);
+	mystats->free_pages = 0;
+	mystats->slab_pages = 0;
+	mystats->active_pages = 0;
+	mystats->inactive_pages = 0;
+	mystats->active_ref_pages = 0;
+	mystats->inactive_ref_pages = 0;
+	mystats->total_active_to_inactive = 0;
+	mystats->total_evicted = 0;
+
+	// Use available vm event counter to get freed and deactivate page events
+	all_vm_events(vm_events);
+
+	mystats->slab_pages += global_page_state(NR_SLAB);
+	
+	for_each_zone(zone_ptr) {
+		// Obtain a lock on the zone while we read it
+		spin_lock_irq(&(zone_ptr->lru_lock));
+	
+		// Aggregate data 
+		mystats->free_pages += zone_ptr->free_pages;
+		list_for_each_entry(page_ptr, &zone_ptr->active_list, lru) {
+			mystats->active_pages++;
+			if(PageReferenced(page_ptr)) {
+				mystats->active_ref_pages++;
+			}
+		}
+
+		list_for_each_entry(page_ptr, &zone_ptr->inactive_list, lru) {
+			mystats->inactive_pages++;
+			if(PageReferenced(page_ptr)) {
+				mystats->inactive_ref_pages++;
+			}
+		}
+
+		// release log
+		spin_unlock_irq(&(zone_ptr->lru_lock));
+	}
+	
+	mystats->total_active_to_inactive = vm_events[PGDEACTIVATE];
+	mystats->total_evicted = vm_events[PGFREE];
+
+	if(copy_to_user(stats, mystats, sizeof(struct memstats)))
+		return -EFAULT;
+
+	kfree(mystats);
+	return 0;
+}
diff -rupN --exclude=.git linux-2.6.18-419.el5.x86_64/mm/Kconfig linux-2.6.18-419.el5.x86_64-memstat-dev/mm/Kconfig
--- linux-2.6.18-419.el5.x86_64/mm/Kconfig	2017-05-16 22:25:34.000000000 -0400
+++ linux-2.6.18-419.el5.x86_64-memstat-dev/mm/Kconfig	2017-07-23 16:26:57.000000000 -0400
@@ -1,3 +1,6 @@
+config JALVARADO
+	def_bool y
+
 config SELECT_MEMORY_MODEL
 	def_bool y
 	depends on EXPERIMENTAL || ARCH_SELECT_MEMORY_MODEL
diff -rupN --exclude=.git linux-2.6.18-419.el5.x86_64/mm/page_alloc.c linux-2.6.18-419.el5.x86_64-memstat-dev/mm/page_alloc.c
--- linux-2.6.18-419.el5.x86_64/mm/page_alloc.c	2017-05-16 22:25:34.000000000 -0400
+++ linux-2.6.18-419.el5.x86_64-memstat-dev/mm/page_alloc.c	2017-07-23 13:57:38.000000000 -0400
@@ -474,6 +474,11 @@ static void __free_pages_ok(struct page 
  */
 void fastcall __init __free_pages_bootmem(struct page *page, unsigned int order)
 {
+
+#ifdef CONFIG_JALVARADO
+	page->m_reference_count = 0;
+#endif
+
 	if (order == 0) {
 		__ClearPageReserved(page);
 		set_page_count(page, 0);
@@ -550,6 +555,10 @@ static int prep_new_page(struct page *pa
 			1 << PG_buddy ))))
 		bad_page(page);
 
+#ifdef CONFIG_JALVARADO
+	page->m_reference_count = 0;
+#endif
+
 	/*
 	 * For now, we report if PG_reserved was found set, but do not
 	 * clear it, and do not allocate the page: as a safety net.
diff -rupN --exclude=.git linux-2.6.18-419.el5.x86_64/mm/vmscan.c linux-2.6.18-419.el5.x86_64-memstat-dev/mm/vmscan.c
--- linux-2.6.18-419.el5.x86_64/mm/vmscan.c	2017-05-16 22:25:34.000000000 -0400
+++ linux-2.6.18-419.el5.x86_64-memstat-dev/mm/vmscan.c	2017-07-23 17:07:13.000000000 -0400
@@ -421,6 +421,77 @@ cannot_free:
 	return 0;
 }
 
+#ifdef CONFIG_JALVARADO
+
+#define MEMSTATS_MAX_REF_COUNT 128
+
+void memstats_timer_function(unsigned long data);
+
+struct timer_list memstats_timer;
+
+void update_m_reference_count(struct page *page) {
+	if (page->m_reference_count < MEMSTATS_MAX_REF_COUNT) {
+		page->m_reference_count++;	
+	}
+}
+
+void memstats_timer_function(unsigned long data) {
+	struct zone *zone;
+	struct page *page;
+
+	for_each_zone(zone) {
+		// try to get a lock, skip otherwise
+		if (spin_trylock_irq(&(zone->lru_lock))) {
+			list_for_each_entry(page, &zone->active_list, lru) {
+				if (TestClearPageReferenced(page)){
+					update_m_reference_count(page);	
+				}
+			}
+			list_for_each_entry(page, &zone->active_list, lru) {
+				if (TestClearPageReferenced(page)){
+					update_m_reference_count(page);	
+				}
+			}
+			spin_unlock_irq(&(zone->lru_lock));
+		}
+	}
+
+        mod_timer(&memstats_timer, jiffies + HZ);
+}
+
+static int timer_mod_init(void) {
+	init_timer(&memstats_timer);
+
+  	memstats_timer.function = memstats_timer_function;
+  	memstats_timer.data = 1;
+  	memstats_timer.expires = jiffies + HZ; /* 1 second */
+        add_timer(&memstats_timer); /* Starting the timer */
+
+	printk(KERN_INFO "Memstats timer module loaded\n");
+	return 0;
+}
+
+static void timer_mod_exit(void) {
+	del_timer_sync(&memstats_timer);
+	printk(KERN_INFO "Memstats timer module unloaded\n");	
+}
+
+// Init Kernel module to update reference counts with a timer 
+module_init(timer_mod_init);
+module_exit(timer_mod_exit);
+
+
+unsigned int test_decrement_m_ref_count(struct page *page) {
+	unsigned int curr_count = page->m_reference_count;
+	if (curr_count > 0) {
+		page->m_reference_count = curr_count - 1;
+	}
+	return curr_count;		
+}
+
+#endif
+
+
 /*
  * shrink_page_list() returns the number of reclaimed pages
  */
@@ -446,6 +517,12 @@ static unsigned long shrink_page_list(st
 		page = lru_to_page(page_list);
 		list_del(&page->lru);
 
+#ifdef CONFIG_JALVARADO
+		referenced = TestClearPageReferenced(page);
+		if (referenced)
+			update_m_reference_count(page);
+#endif
+
 		if (TestSetPageLocked(page))
 			goto keep;
 
@@ -462,11 +539,15 @@ static unsigned long shrink_page_list(st
 
 		if (PageWriteback(page))
 			goto keep_locked;
-
+#ifdef CONFIG_JALVARADO
+		if ((referenced || test_decrement_m_ref_count(page) > 0) && page_mapping_inuse(page))
+			goto activate_locked;
+#else /* CONFIG_JALVARADO */
 		referenced = page_referenced(page, 1);
 		/* In active use or really unfreeable?  Activate it. */
 		if (referenced && page_mapping_inuse(page))
 			goto activate_locked;
+#endif /* CONFIG_JALVARDO */
 
 #ifdef CONFIG_SWAP
 		/*
@@ -817,6 +898,16 @@ force_reclaim_mapped:
 		page = lru_to_page(&l_hold);
 		list_del(&page->lru);
 		if (page_mapped(page)) {
+#ifdef CONFIG_JALVARADO
+			if (!reclaim_mapped ||
+			    (total_swap_pages == 0 && PageAnon(page)) ||
+			     TestClearPageReferenced(page) ||
+			     test_decrement_m_ref_count(page) > 0) {
+				list_add(&page->lru, &l_active);
+				trace_mm_pagereclaim_shrinkactive_a2a(page);
+				continue;
+			}	
+#else // Original 
 			if (!reclaim_mapped ||
 			    (total_swap_pages == 0 && PageAnon(page)) ||
 			    page_referenced(page, 0)) {
@@ -824,6 +915,7 @@ force_reclaim_mapped:
 				trace_mm_pagereclaim_shrinkactive_a2a(page);
 				continue;
 			}
+#endif
 		}
 		list_add(&page->lru, &l_inactive);
 	}
